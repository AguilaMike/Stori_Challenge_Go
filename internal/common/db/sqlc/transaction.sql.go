// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: transaction.sql

package sqlc

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO transactions (id, account_id, amount, type, input_file_id, input_date, created_at)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, account_id, amount, type, input_file_id, input_date, created_at
`

type CreateTransactionParams struct {
	ID          uuid.UUID `json:"id"`
	AccountID   uuid.UUID `json:"account_id"`
	Amount      string    `json:"amount"`
	Type        string    `json:"type"`
	InputFileID string    `json:"input_file_id"`
	InputDate   time.Time `json:"input_date"`
	CreatedAt   int64     `json:"created_at"`
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, createTransaction,
		arg.ID,
		arg.AccountID,
		arg.Amount,
		arg.Type,
		arg.InputFileID,
		arg.InputDate,
		arg.CreatedAt,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Amount,
		&i.Type,
		&i.InputFileID,
		&i.InputDate,
		&i.CreatedAt,
	)
	return i, err
}

const getTransaction = `-- name: GetTransaction :one
SELECT id, account_id, amount, type, input_file_id, input_date, created_at FROM transactions
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTransaction(ctx context.Context, id uuid.UUID) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, getTransaction, id)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Amount,
		&i.Type,
		&i.InputFileID,
		&i.InputDate,
		&i.CreatedAt,
	)
	return i, err
}

const getTransactionSummary = `-- name: GetTransactionSummary :one
SELECT
    SUM(CASE WHEN type = 'credit' THEN amount ELSE -amount END) as total_balance,
    COUNT(*) as transaction_count,
    AVG(CASE WHEN type = 'credit' THEN amount ELSE NULL END) as average_credit,
    AVG(CASE WHEN type = 'debit' THEN amount ELSE NULL END) as average_debit
FROM transactions
WHERE account_id = $1
`

type GetTransactionSummaryRow struct {
	TotalBalance     string `json:"total_balance"`
	TransactionCount int64  `json:"transaction_count"`
	AverageCredit    string `json:"average_credit"`
	AverageDebit     string `json:"average_debit"`
}

func (q *Queries) GetTransactionSummary(ctx context.Context, accountID uuid.UUID) (GetTransactionSummaryRow, error) {
	row := q.db.QueryRowContext(ctx, getTransactionSummary, accountID)
	var i GetTransactionSummaryRow
	err := row.Scan(
		&i.TotalBalance,
		&i.TransactionCount,
		&i.AverageCredit,
		&i.AverageDebit,
	)
	return i, err
}

const listTransactionsByAccount = `-- name: ListTransactionsByAccount :many
SELECT id, account_id, amount, type, input_file_id, input_date, created_at FROM transactions
WHERE account_id = $1
ORDER BY created_at
LIMIT $2 OFFSET $3
`

type ListTransactionsByAccountParams struct {
	AccountID uuid.UUID `json:"account_id"`
	Limit     int64     `json:"limit"`
	Offset    int64     `json:"offset"`
}

func (q *Queries) ListTransactionsByAccount(ctx context.Context, arg ListTransactionsByAccountParams) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, listTransactionsByAccount, arg.AccountID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transaction{}
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.Amount,
			&i.Type,
			&i.InputFileID,
			&i.InputDate,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
