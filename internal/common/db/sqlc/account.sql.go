// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: account.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts (id, nickname, balance, created_at, updated_at, active)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, nickname, balance, created_at, updated_at, active
`

type CreateAccountParams struct {
	ID        uuid.UUID `json:"id"`
	Nickname  string    `json:"nickname"`
	Balance   string    `json:"balance"`
	CreatedAt int64     `json:"created_at"`
	UpdatedAt int64     `json:"updated_at"`
	Active    bool      `json:"active"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, createAccount,
		arg.ID,
		arg.Nickname,
		arg.Balance,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Active,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Nickname,
		&i.Balance,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Active,
	)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :exec
UPDATE accounts
SET active = false
WHERE id = $1
`

func (q *Queries) DeleteAccount(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteAccount, id)
	return err
}

const getAccount = `-- name: GetAccount :one
SELECT id, nickname, balance, created_at, updated_at, active FROM accounts
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAccount(ctx context.Context, id uuid.UUID) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccount, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Nickname,
		&i.Balance,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Active,
	)
	return i, err
}

const listAccounts = `-- name: ListAccounts :many
SELECT id, nickname, balance, created_at, updated_at, active FROM accounts
WHERE active = true
ORDER BY created_at
LIMIT $1 OFFSET $2
`

type ListAccountsParams struct {
	Limit  int64 `json:"limit"`
	Offset int64 `json:"offset"`
}

func (q *Queries) ListAccounts(ctx context.Context, arg ListAccountsParams) ([]Account, error) {
	rows, err := q.db.QueryContext(ctx, listAccounts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Account{}
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.Nickname,
			&i.Balance,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Active,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccount = `-- name: UpdateAccount :one
UPDATE accounts
SET nickname = $2, balance = $3, updated_at = $4, active = $5
WHERE id = $1
RETURNING id, nickname, balance, created_at, updated_at, active
`

type UpdateAccountParams struct {
	ID        uuid.UUID `json:"id"`
	Nickname  string    `json:"nickname"`
	Balance   string    `json:"balance"`
	UpdatedAt int64     `json:"updated_at"`
	Active    bool      `json:"active"`
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, updateAccount,
		arg.ID,
		arg.Nickname,
		arg.Balance,
		arg.UpdatedAt,
		arg.Active,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Nickname,
		&i.Balance,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Active,
	)
	return i, err
}
